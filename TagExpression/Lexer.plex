<?php

namespace Openpp\PushNotificationBundle\TagExpression;

/**
 * This file has been generated by the PHP_LexerGenerator.
 *
 * Reference :
 *   https://pear.php.net/package/PHP_LexerGenerator/docs/latest/PHP_LexerGenerator/PHP_LexerGenerator.html
 *
 */
class Lexer
{
    private $data;
    private $N;
    public $token;
    public $value;
    private $line;
    private $state = 1;
    private $tagCount = 0;
    private $orCount = 0;
    private $andCount = 0;
    private $notCount = 0; 

    function __construct($data)
    {
        $this->data = $data;
        $this->N = 0;
        $this->line = 1;
    }

/*!lex2php
%input $this->data
%counter $this->N
%token $this->token
%value $this->value
%line $this->line
AND = "&&"
OR = "||"
NOT = "!"
LPAREN = "("
RPAREN = ")"
TAG = /[a-zA-Z0-9_@#\.:\-]+/
WHITESPACE = /[ \t\n]+/
*/
/*!lex2php
AND {
    $this->andCount++;
    $this->token = Parser::T_AND;
}
OR {
    $this->orCount++;
    $this->token = Parser::T_OR;
}
NOT {
    $this->notCount++;
    $this->token = Parser::T_NOT;
}
LPAREN {
    $this->token = Parser::T_LPAREN;
}
RPAREN {
    $this->token = Parser::T_RPAREN;
}
TAG {
    $this->tagCount++;

    if (TagExpression::MAX_TAG_LENGTH < strlen($this->value)) {
        throw new Exception(sprintf(
            'A tag can be up to %d characters: %s', TagExpression::MAX_TAG_LENGTH, $this->value
        ));
    }

    if ($this->andCount || $this->notCount) {
        if (TagExpression::MAX_TAGS_WITH_VALIOUS_OPERATORS < $this->tagCount) {
            throw new Exception(sprintf(
                'Tag expressions are limited to %d tags if they contain except ORs.',
                 TagExpression::MAX_TAGS_WITH_VALIOUS_OPERATORS
            ));
        }
    } else {
        if (TagExpression::MAX_TAGS_WITH_ONLY_OR_OPERATORS < $this->tagCount) {
            throw new Exception(sprintf(
                'Tag expressions are limited to %d tags if they contain only ORs.',
                TagExpression::MAX_TAGS_WITH_ONLY_OR_OPERATORS
            ));
        }
    }

    $this->token = Parser::T_TAG;
}
WHITESPACE {
    return false;
}
*/
}
