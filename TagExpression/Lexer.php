<?php

namespace Openpp\PushNotificationBundle\TagExpression;

/**
 * This file has been generated by the PHP_LexerGenerator.
 *
 * Reference :
 *   https://pear.php.net/package/PHP_LexerGenerator/docs/latest/PHP_LexerGenerator/PHP_LexerGenerator.html
 *
 */
class Lexer
{
    private $data;
    private $N;
    public $token;
    public $value;
    private $line;
    private $state = 1;
    private $tagCount = 0;
    private $orCount = 0;
    private $andCount = 0;
    private $notCount = 0; 

    function __construct($data)
    {
        $this->data = $data;
        $this->N = 0;
        $this->line = 1;
    }


    private $_yy_state = 1;
    private $_yy_stack = array();

    function yylex()
    {
        return $this->{'yylex' . $this->_yy_state}();
    }

    function yypushstate($state)
    {
        array_push($this->_yy_stack, $this->_yy_state);
        $this->_yy_state = $state;
    }

    function yypopstate()
    {
        $this->_yy_state = array_pop($this->_yy_stack);
    }

    function yybegin($state)
    {
        $this->_yy_state = $state;
    }



    function yylex1()
    {
        $tokenMap = array (
              1 => 0,
              2 => 0,
              3 => 0,
              4 => 0,
              5 => 0,
              6 => 0,
              7 => 0,
            );
        if ($this->N >= strlen($this->data)) {
            return false; // end of input
        }
        $yy_global_pattern = '/\G(&&)|\G(\\|\\|)|\G(!)|\G(\\()|\G(\\))|\G([a-zA-Z0-9_@#\.:\-]+)|\G([ \t\n]+)/';

        do {
            if (preg_match($yy_global_pattern,$this->data, $yymatches, null, $this->N)) {
                $yysubmatches = $yymatches;
                $yymatches = array_filter($yymatches, 'strlen'); // remove empty sub-patterns
                if (!count($yymatches)) {
                    throw new Exception('Error: lexing failed because a rule matched' .
                        ' an empty string.  Input "' . substr($this->data,
                        $this->N, 5) . '... state 1');
                }
                next($yymatches); // skip global match
                $this->token = key($yymatches); // token number
                if ($tokenMap[$this->token]) {
                    // extract sub-patterns for passing to lex function
                    $yysubmatches = array_slice($yysubmatches, $this->token + 1,
                        $tokenMap[$this->token]);
                } else {
                    $yysubmatches = array();
                }
                $this->value = current($yymatches); // token value
                $r = $this->{'yy_r1_' . $this->token}($yysubmatches);
                if ($r === null) {
                    $this->N += strlen($this->value);
                    $this->line += substr_count($this->value, "\n");
                    // accept this token
                    return true;
                } elseif ($r === true) {
                    // we have changed state
                    // process this token in the new state
                    return $this->yylex();
                } elseif ($r === false) {
                    $this->N += strlen($this->value);
                    $this->line += substr_count($this->value, "\n");
                    if ($this->N >= strlen($this->data)) {
                        return false; // end of input
                    }
                    // skip this token
                    continue;
                } else {
                    $yy_yymore_patterns = array(
        1 => array(0, "\G(\\|\\|)|\G(!)|\G(\\()|\G(\\))|\G([a-zA-Z0-9_@#\.:\-]+)|\G([ \t\n]+)"),
        2 => array(0, "\G(!)|\G(\\()|\G(\\))|\G([a-zA-Z0-9_@#\.:\-]+)|\G([ \t\n]+)"),
        3 => array(0, "\G(\\()|\G(\\))|\G([a-zA-Z0-9_@#\.:\-]+)|\G([ \t\n]+)"),
        4 => array(0, "\G(\\))|\G([a-zA-Z0-9_@#\.:\-]+)|\G([ \t\n]+)"),
        5 => array(0, "\G([a-zA-Z0-9_@#\.:\-]+)|\G([ \t\n]+)"),
        6 => array(0, "\G([ \t\n]+)"),
        7 => array(0, ""),
    );

                    // yymore is needed
                    do {
                        if (!strlen($yy_yymore_patterns[$this->token][1])) {
                            throw new Exception('cannot do yymore for the last token');
                        }
                        $yysubmatches = array();
                        if (preg_match('/' . $yy_yymore_patterns[$this->token][1] . '/',
                              $this->data, $yymatches, null, $this->N)) {
                            $yysubmatches = $yymatches;
                            $yymatches = array_filter($yymatches, 'strlen'); // remove empty sub-patterns
                            next($yymatches); // skip global match
                            $this->token += key($yymatches) + $yy_yymore_patterns[$this->token][0]; // token number
                            $this->value = current($yymatches); // token value
                            $this->line = substr_count($this->value, "\n");
                            if ($tokenMap[$this->token]) {
                                // extract sub-patterns for passing to lex function
                                $yysubmatches = array_slice($yysubmatches, $this->token + 1,
                                    $tokenMap[$this->token]);
                            } else {
                                $yysubmatches = array();
                            }
                        }
                        $r = $this->{'yy_r1_' . $this->token}($yysubmatches);
                    } while ($r !== null && !is_bool($r));
                    if ($r === true) {
                        // we have changed state
                        // process this token in the new state
                        return $this->yylex();
                    } elseif ($r === false) {
                        $this->N += strlen($this->value);
                        $this->line += substr_count($this->value, "\n");
                        if ($this->N >= strlen($this->data)) {
                            return false; // end of input
                        }
                        // skip this token
                        continue;
                    } else {
                        // accept
                        $this->N += strlen($this->value);
                        $this->line += substr_count($this->value, "\n");
                        return true;
                    }
                }
            } else {
                throw new Exception('Unexpected input at line' . $this->line .
                    ': ' . $this->data[$this->N]);
            }
            break;
        } while (true);

    } // end function

    function yy_r1_1($yy_subpatterns)
    {

    $this->andCount++;
    $this->token = Parser::T_AND;
    }
    function yy_r1_2($yy_subpatterns)
    {

    $this->orCount++;
    $this->token = Parser::T_OR;
    }
    function yy_r1_3($yy_subpatterns)
    {

    $this->notCount++;
    $this->token = Parser::T_NOT;
    }
    function yy_r1_4($yy_subpatterns)
    {

    $this->token = Parser::T_LPAREN;
    }
    function yy_r1_5($yy_subpatterns)
    {

    $this->token = Parser::T_RPAREN;
    }
    function yy_r1_6($yy_subpatterns)
    {

    $this->tagCount++;

    if (TagExpression::MAX_TAG_LENGTH < strlen($this->value)) {
        throw new Exception(sprintf(
            'A tag can be up to %d characters: %s', TagExpression::MAX_TAG_LENGTH, $this->value
        ));
    }

    if ($this->andCount || $this->notCount) {
        if (TagExpression::MAX_TAGS_WITH_VALIOUS_OPERATORS < $this->tagCount) {
            throw new Exception(sprintf(
                'Tag expressions are limited to %d tags if they contain except ORs.',
                 TagExpression::MAX_TAGS_WITH_VALIOUS_OPERATORS
            ));
        }
    } else {
        if (TagExpression::MAX_TAGS_WITH_ONLY_OR_OPERATORS < $this->tagCount) {
            throw new Exception(sprintf(
                'Tag expressions are limited to %d tags if they contain only ORs.',
                TagExpression::MAX_TAGS_WITH_ONLY_OR_OPERATORS
            ));
        }
    }

    $this->token = Parser::T_TAG;
    }
    function yy_r1_7($yy_subpatterns)
    {

    return false;
    }

}
