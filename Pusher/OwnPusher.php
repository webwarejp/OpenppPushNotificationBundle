<?php

namespace Openpp\PushNotificationBundle\Pusher;

use Sly\NotificationPusher\PushManager;
use Sly\NotificationPusher\Model\Message;
use Sly\NotificationPusher\Collection\DeviceCollection;
use Sly\NotificationPusher\Model\Push;
use Sly\NotificationPusher\Adapter\Gcm;
use Sly\NotificationPusher\Adapter\Apns;
use Openpp\PushNotificationBundle\Model\DeviceInterface;
use Openpp\PushNotificationBundle\Model\ApplicationInterface;
use Openpp\PushNotificationBundle\Model\Device;
use Openpp\PushNotificationBundle\Collections\DeviceCollection as Devices;
use Openpp\WebPushAdapter\Adapter\Web;
use Sly\NotificationPusher\Collection\PushCollection;

class OwnPusher extends AbstractPusher
{
    /**
     * @var string
     */
    protected $publicKey;

    /**
     * @var string
     */
    protected $privateKey;

    /**
     * @var integer
     */
    protected $ttl;

    /**
     * @var \Sonata\MediaBundle\Twig\Extension\MediaExtension
     */
    protected $mediaExtension;

    /**
     * Sets the a signing key pair for Web Push server self-identification
     * generated by using the elliptic curve digital signature (ECDSA) over the P-256 curve.
     *
     * @param string $publicKey
     * @param string $privateKey
     */
    public function setKeyPair($publicKey, $privateKey)
    {
        $this->publicKey = $publicKey;
        $this->privateKey = $privateKey;
    }

    /**
     * Sets the default TTL for Web Push
     *
     * @param integer $ttl
     */
    public function setTTL($ttl)
    {
        $this->ttl = $ttl;
    }

    /**
     * Sets the media extension
     *
     * @param \Sonata\MediaBundle\Twig\Extension\MediaExtension $mediaExtension
     */
    public function setMediaExtension(\Sonata\MediaBundle\Twig\Extension\MediaExtension $mediaExtension)
    {
        $this->mediaExtension = $mediaExtension;
    }

    /**
     * {@inheritdoc}
     */
    public function push($application, $tagExpression, $message, array $options = array())
    {
        $application = $this->getApplication($application);

        $devices = $this->deviceManager->findDevicesByTagExpression($application, $tagExpression);

        if (!empty($devices)) {
            $this->pushToDevice($application, $devices, $message, $options);
        }
    }

    /**
     * {@inheritdoc}
     */
    public function pushToDevice($application, $devices, $message, array $options = array())
    {
        $application = $this->getApplication($application);

        if (is_integer($devices[0])) {
            $devices = $this->deviceManager->findDevicesBy(array('id' => $devices));
        }
        $devices = new Devices($devices);

        $pushManager = new PushManager(PushManager::ENVIRONMENT_PROD);
        $timestamp   = new \DateTime();
        $notificationId = $this->generateNotificationId();
        $options['tag'] = $notificationId;
        $optionsResult = $options;
        $notRegisteredDevices = array();

        foreach (array_values(Device::getTypeChoices()) as $type) {
            $targetDevices = $devices->getByType($type);
            if (!$targetDevices->count()) {
                continue;
            }
            if ($type == DeviceInterface::TYPE_WEB) {
                // sort by endpoint.
                $collection = new Devices($targetDevices->toArray());
                $targetDevices = $collection->sortByField('token');
            }
            $deviceCollection = new DeviceCollection($targetDevices->toArray());

            $messageObj = $this->createMessage($application, $type, $message, $options);
            $optionsResult = array_merge($optionsResult, $messageObj->getOptions());
            $push = new Push($this->getAdapter($application, $type), $deviceCollection, $messageObj);
            $pushManager->add($push);
            $result = $pushManager->push();
            $notRegisteredDevices += $this->getNotRegisteredDevices($result);
        }

        $this->dispatchPushResult($application, $notificationId, $message, $optionsResult, $timestamp, $devices, $notRegisteredDevices);
    }

    /**
     * Get the adapter.
     *
     * @param ApplicationInterface $application
     * @param integer $deviceType
     *
     * @return \Sly\NotificationPusher\Adapter\AdapterInterface
     */
    protected function getAdapter(ApplicationInterface $application, $deviceType)
    {
        switch ($deviceType) {
            case DeviceInterface::TYPE_ANDROID:
                $adapter = new Gcm(array(
                    'apiKey' => $application->getGcmApiKey()
                ));
                break;

            case DeviceInterface::TYPE_IOS:
                $adapter = new Apns(array(
                    'certificate' => $application->getApnsCertificate()
                ));
                break;

            case DeviceInterface::TYPE_WEB:
                if (empty($this->publicKey) || empty($this->privateKey)) {
                    throw new \RuntimeException('Need to configure a key pair for Web Push.');
                }
                $parameters = array(
                    'publicKey'  => $this->publicKey,
                    'privateKey' => $this->privateKey,
                );
                if ($this->ttl) {
                    $parameters['ttl'] = $this->ttl;
                }
                $adapter = new Web($parameters);
                break;

            default:
                throw new \RuntimeException('Unsupported device type: ' . $deviceType);
        }

        return $adapter;
    }

    /**
     * Creates the message according to the device type.
     *
     * @param ApplicationInterface $application
     * @param integer $deviceType
     * @param string $message
     * @param array $options
     *
     * @return \Sly\NotificationPusher\Model\Message
     */
    protected function createMessage(ApplicationInterface $application, $deviceType, $message, array $options = array())
    {
        $defaultOptions = array(
            'title' => $application->getName(),
        );
        switch ($deviceType) {
            case DeviceInterface::TYPE_WEB:
                if (!empty($application->getIcon())) {
                    $defaultOptions['icon'] = $this->mediaExtension->path($application->getIcon(), 'reference');
                }
                $options = array_merge($defaultOptions, $options);
                break;

            default:
                break;
        }

        return new Message($message, $options);
    }

    /**
     * Get 'NotRegistered' devices.
     *
     * @param PushCollection $pushCollection
     * @return \Openpp\PushNotificationBundle\Model\DeviceInterface[]
     */
    protected function getNotRegisteredDevices(PushCollection $pushCollection)
    {
        $result = array();
        foreach ($pushCollection as $push) {
            $adapter = $push->getAdapter();
            if (method_exists($adapter, 'getNotRegisteredDevices')) {
                $notRegisteredDevices = $adapter->getNotRegisteredDevices();
                foreach ($notRegisteredDevices as $device) {
                    $result[] = $device;
                }
            }
        }

        return $result;
    }
}
